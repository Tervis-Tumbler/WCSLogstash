input {
    file {
        #path => "/home/cmagnuson/Documents/logs/autoShipMgr.sample"
        #path => "/home/cmagnuson/Documents/logs/autoShipMgr.20150901110003"
        #path => "/home/cmagnuson/Documents/logs/autoShipMgr.*"
        path => "/home/cmagnuson/Documents/WCSLogBackups/autoShipMgr.20150901050003"
        #path => "/home/cmagnuson/Documents/WCSLogBackups/autoShipMgr.*"
        #path => "/home/cmagnuson/Documents/logs/autoShipMgr.stalled.small.sample"
        start_position => beginning
	    sincedb_path => "/dev/null"
	    codec => multiline {
            pattern => "\A--Time-- %{BASE10NUM:UnixDateTimeOfEvent} - %{DATESTAMP:DateTimeOfEvent}"
	        negate => true
	        what => "previous"
	    }
    }
}

filter {
	grok { 
		#break_on_match => false
        #This version causes catastrophic backtracking
		#match => { "message" => "(?<FoundXMLString><(?<StartXMLElementName>SHIPMENTREQUEST|SHIPMENTRESPONSE)>((?!<\/(SHIPMENTREQUEST|SHIPMENTRESPONSE)>).*|\n|\r)*<\/\k<StartXMLElementName>>)" }
	    #This version works but has to match each character of the xml document up to the end	
        match => { "message" => "(?<FoundXMLString><(?<StartXMLElementName>SHIPMENTREQUEST|SHIPMENTRESPONSE)>((?!<\/(SHIPMENTREQUEST|SHIPMENTRESPONSE)>).|\n|\r)*<\/\k<StartXMLElementName>>)" }
		#match => { "message" => "(?<FoundXMLString><(?<StartXMLElementName>BartenderRequest)[^>]+>(.*|\n|\r)*?<\/\k<StartXMLElementName>>)" }
		#match => { "message" => "\A--Time-- %{BASE10NUM:UnixDateTimeOfEvent} - %{DATESTAMP:DateTimeOfEvent}" }
        #match => { "path" => "(?<FileNameWithoutExtension>\w+)(\.\w+)?[^\/]*$" }
	}
    
    if [StartXMLElementName] { mutate { add_tag => [ "%{StartXMLElementName}" ] } }
	
    date {
        match => [ "DateTimeOfEvent", "MM/dd/yyyy kk:mm:ss.SSS" ]
	}

    if [StartXMLElementName] {
        xml {
            target => ParsedXML
            source => FoundXMLString
        }
    }

    if [StartXMLElementName] == "SHIPMENTREQUEST" {
		mutate {
			add_field => {
				ShipmentMethod => "%{[ParsedXML][SHIPMENTSERVICE][0][SCS][0]}"
				LPN => "%{[ParsedXML][PACKAGES][0][PKG][0][REFERENCE][0][CONSIGNEEREFERENCE]}"
			}
		}
	}
	
    if [StartXMLElementName] == "SHIPMENTRESPONSE" and [ParsedXML][RESPONSE][0][RESPONSESTATUSCODE][0] == "0" {
		mutate {
			add_field => {
				LPN => "%{[ParsedXML][RATEDSHIPMENT][0][RATEDPACKAGE][0][REFERENCE][0][CONSIGNEEREFERENCE]}"
			}
		}
	}

    if [StartXMLElementName] == "SHIPMENTRESPONSE" and [ParsedXML][RESPONSE][0][RESPONSESTATUSCODE][0] != "0" {
        grok {
            match => { "message" => "0000000000000000033:  Updating %{BASE10NUM:LPN}Print Apply route to Manifest Error" }
        }
	}
    
    if [StartXMLElementName] == "BartenderRequest" {
		mutate {
			add_field => {
				LPN => "%{[ParsedXML][QueryPrompt][0][content]}"
			}
		}
	}
    
    elapsed {
        start_tag => "SHIPMENTREQUEST"
        end_tag => "SHIPMENTRESPONSE"
        unique_id_field => "LPN"
        new_event_on_match => false
    }
}

output {
	#stdout { codec => rubydebug }
    stdout { codec => dots }
    elasticsearch { 
        hosts => localhost
        document_id => "%{UnixDateTimeOfEvent}%{FileNameWithoutExtension}"
    }
}
