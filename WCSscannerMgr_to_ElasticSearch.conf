input {
    file {
        #path => "/home/cmagnuson/Documents/logs/scannerMgr.sample"
        #path => "/home/cmagnuson/Documents/WCSLogBackups/scannerMgr.20151019.170000"
        path => "/home/cmagnuson/Documents/WCSLogBackups/scannerMgr.*"
        #path => "/mnt/Log/Tmp/scannerMgr"
        start_position => beginning
	    sincedb_path => "/dev/null"
	    codec => multiline {
            pattern => "\A--Time-- %{BASE10NUM:UnixDateTimeOfEvent} - %{DATESTAMP:DateTimeOfEvent}"
	        negate => true
	        what => "previous"
	    }
    }
}

filter {
	grok { 
		break_on_match => false
        match => { "message" => "^	Barcode: \[(?<ScannerMessage>[^\]]*)] SequenceNo: %{BASE10NUM:SequenceNo}" }
		match => { "message" => "Received Barcode Read Notice from \[(?<ScannerNumber>.)\]..." }
		match => { "message" => "\A--Time-- %{BASE10NUM:UnixDateTimeOfEvent} - %{DATESTAMP:DateTimeOfEvent}" }
        match => { "path" => "(?<FileNameWithoutExtension>\w+)(\.\w+)?[^\/]*$" }
	}
    
    grok {
		match => { "ScannerMessage" => "^%{BASE10NUM:LPN} %{BASE10NUM:Weight}  %{BASE10NUM:Height}$" }
		match => { "ScannerMessage" => "^%{BASE10NUM:LPN} %{BASE10NUM:ShippingID}$" }
		match => { "ScannerMessage" => "^%{BASE10NUM:LPN} 1Z%{BASE10NUM:ShippingID}$" }
		match => { "ScannerMessage" => "^%{BASE10NUM:LPN} $" }
        add_tag => [ "ScannerMessageParsedFully" ]
    }    
    
    grok {
		match => { "ScannerMessage" => "^\?\?\?\?\?\?\?\?\? %{BASE10NUM:Weight}  %{BASE10NUM:Height}$" }
		match => { "ScannerMessage" => "^\?\?\?\?\?\?\?\?\? %{BASE10NUM:ShippingID}$" }
		match => { "ScannerMessage" => "^\?\?\?\?\?\?\?\?\? 1Z%{BASE10NUM:ShippingID}$" }
		match => { "ScannerMessage" => "^\?\?\?\?\?\?\?\?\? %{BASE10NUM:Weight} $" }
		match => { "ScannerMessage" => "^%{BASE10NUM:LPN} \?$" }
        add_tag => [ "ScannerMessageParsedPartially" ]
    } 

    if [ScannerNumber] == "1" {
		mutate { add_field => {	ScannerName => "PrintApply"	} }
	} else if [ScannerNumber] == "2" {
		mutate { add_field => {	ScannerName => "Shipping" } }
	} else {
		mutate { add_field => {	ScannerName => "Unknown" } }
    }

    if [DateTimeOfEvent] =~ "\.\d\d\d$" {
        date {
            match => [ "DateTimeOfEvent", "MM/dd/yyyy HH:mm:ss.SSS" ]
	    }
    } else {
        date {
            match => [ "DateTimeOfEvent", "MM/dd/yyyy HH:mm:ss" ]
	    }
    }
}

output {
	#stdout { codec => rubydebug }
    stdout { codec => dots }
    elasticsearch { 
        host => localhost
        document_id => "%{UnixDateTimeOfEvent}%{FileNameWithoutExtension}"
    }
}

